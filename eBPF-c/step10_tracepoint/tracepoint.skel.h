/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRACEPOINT_SKEL_H__
#define __TRACEPOINT_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct tracepoint {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *counting_map;
	} maps;
	struct {
		struct bpf_program *my_mm_page_alloc;
	} progs;
	struct {
		struct bpf_link *my_mm_page_alloc;
	} links;

#ifdef __cplusplus
	static inline struct tracepoint *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct tracepoint *open_and_load();
	static inline int load(struct tracepoint *skel);
	static inline int attach(struct tracepoint *skel);
	static inline void detach(struct tracepoint *skel);
	static inline void destroy(struct tracepoint *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
tracepoint__destroy(struct tracepoint *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
tracepoint__create_skeleton(struct tracepoint *obj);

static inline struct tracepoint *
tracepoint__open_opts(const struct bpf_object_open_opts *opts)
{
	struct tracepoint *obj;
	int err;

	obj = (struct tracepoint *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = tracepoint__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	tracepoint__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct tracepoint *
tracepoint__open(void)
{
	return tracepoint__open_opts(NULL);
}

static inline int
tracepoint__load(struct tracepoint *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct tracepoint *
tracepoint__open_and_load(void)
{
	struct tracepoint *obj;
	int err;

	obj = tracepoint__open();
	if (!obj)
		return NULL;
	err = tracepoint__load(obj);
	if (err) {
		tracepoint__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
tracepoint__attach(struct tracepoint *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
tracepoint__detach(struct tracepoint *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *tracepoint__elf_bytes(size_t *sz);

static inline int
tracepoint__create_skeleton(struct tracepoint *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "tracepoint";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "counting_map";
	s->maps[0].map = &obj->maps.counting_map;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "my_mm_page_alloc";
	s->progs[0].prog = &obj->progs.my_mm_page_alloc;
	s->progs[0].link = &obj->links.my_mm_page_alloc;

	s->data = tracepoint__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *tracepoint__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x70\x08\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xb7\x06\0\0\x01\0\0\0\x7b\
\x6a\xf0\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x55\0\x09\0\0\0\0\0\xbf\xa2\0\0\
\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\
\0\0\0\x05\0\x01\0\0\0\0\0\xdb\x60\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\
\0\0\x44\x75\x61\x6c\x20\x4d\x49\x54\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\xf0\x01\0\0\xf0\x01\0\0\x2b\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x02\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\x19\
\0\0\0\0\0\0\x08\x07\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\
\0\x02\x09\0\0\0\x2c\0\0\0\0\0\0\x08\x0a\0\0\0\x32\0\0\0\0\0\0\x01\x08\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\
\0\0\0\x01\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x45\0\0\0\x01\0\0\0\0\0\0\0\x4a\
\0\0\0\x05\0\0\0\x40\0\0\0\x4e\0\0\0\x08\0\0\0\x80\0\0\0\x54\0\0\0\x0b\0\0\0\
\xc0\0\0\0\x60\0\0\0\0\0\0\x0e\x0d\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\
\x6d\0\0\0\x05\0\0\x04\x20\0\0\0\x78\0\0\0\x11\0\0\0\0\0\0\0\x7c\0\0\0\x11\0\0\
\0\x40\0\0\0\x80\0\0\0\x07\0\0\0\x80\0\0\0\x86\0\0\0\x07\0\0\0\xa0\0\0\0\x90\0\
\0\0\x02\0\0\0\xc0\0\0\0\x9c\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\
\0\x0d\x02\0\0\0\xaa\0\0\0\x0f\0\0\0\xaf\0\0\0\x01\0\0\x0c\x12\0\0\0\x0e\x02\0\
\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x14\0\0\0\x04\0\0\
\0\x0d\0\0\0\x13\x02\0\0\0\0\0\x0e\x15\0\0\0\x01\0\0\0\x1d\x02\0\0\x01\0\0\x0f\
\0\0\0\0\x0e\0\0\0\0\0\0\0\x20\0\0\0\x23\x02\0\0\x01\0\0\x0f\0\0\0\0\x16\0\0\0\
\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x79\x70\x65\0\x6b\x65\
\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x63\
\x6f\x75\x6e\x74\x69\x6e\x67\x5f\x6d\x61\x70\0\x61\x6c\x6c\x6f\x63\x5f\x69\x6e\
\x66\x6f\0\x70\x61\x64\0\x70\x66\x6e\0\x6f\x72\x64\x65\x72\0\x67\x66\x70\x5f\
\x66\x6c\x61\x67\x73\0\x6d\x69\x67\x72\x61\x74\x65\x74\x79\x70\x65\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x69\x6e\x66\x6f\0\x6d\x79\x5f\
\x6d\x6d\x5f\x70\x61\x67\x65\x5f\x61\x6c\x6c\x6f\x63\0\x74\x72\x61\x63\x65\x70\
\x6f\x69\x6e\x74\x2f\x6b\x6d\x65\x6d\x2f\x6d\x6d\x5f\x70\x61\x67\x65\x5f\x61\
\x6c\x6c\x6f\x63\0\x2f\x72\x6f\x6f\x74\x2f\x67\x6f\x2f\x73\x72\x63\x2f\x65\x62\
\x70\x66\x2d\x67\x6f\x2f\x73\x74\x65\x70\x31\x30\x5f\x74\x72\x61\x63\x65\x70\
\x6f\x69\x6e\x74\x2f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2e\x63\0\x69\x6e\
\x74\x20\x6d\x79\x5f\x6d\x6d\x5f\x70\x61\x67\x65\x5f\x61\x6c\x6c\x6f\x63\x28\
\x73\x74\x72\x75\x63\x74\x20\x61\x6c\x6c\x6f\x63\x5f\x69\x6e\x66\x6f\x20\x2a\
\x69\x6e\x66\x6f\x29\x20\x7b\0\x09\x75\x33\x32\x20\x6b\x65\x79\x20\x20\x20\x20\
\x20\x3d\x20\x30\x3b\0\x09\x75\x36\x34\x20\x69\x6e\x69\x74\x76\x61\x6c\x20\x3d\
\x20\x31\x2c\x20\x2a\x76\x61\x6c\x70\x3b\0\x09\x76\x61\x6c\x70\x20\x3d\x20\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\
\x26\x63\x6f\x75\x6e\x74\x69\x6e\x67\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\
\x29\x3b\0\x09\x69\x66\x20\x28\x21\x76\x61\x6c\x70\x29\x20\x7b\0\x09\x09\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\
\x26\x63\x6f\x75\x6e\x74\x69\x6e\x67\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\
\x2c\x20\x26\x69\x6e\x69\x74\x76\x61\x6c\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\
\x29\x3b\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\
\x5f\x61\x64\x64\x28\x76\x61\x6c\x70\x2c\x20\x31\x29\x3b\0\x7d\0\x63\x68\x61\
\x72\0\x5f\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xac\0\
\0\0\xc0\0\0\0\0\0\0\0\x08\0\0\0\xc0\0\0\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x10\0\0\
\0\xc0\0\0\0\x0a\0\0\0\0\0\0\0\xde\0\0\0\x12\x01\0\0\0\x74\0\0\x08\0\0\0\xde\0\
\0\0\x42\x01\0\0\x06\x78\0\0\x18\0\0\0\xde\0\0\0\x54\x01\0\0\x06\x7c\0\0\x28\0\
\0\0\xde\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\xde\0\0\0\x6d\x01\0\0\x09\x84\0\0\x48\
\0\0\0\xde\0\0\0\x9f\x01\0\0\x06\x88\0\0\x58\0\0\0\xde\0\0\0\0\0\0\0\0\0\0\0\
\x70\0\0\0\xde\0\0\0\xad\x01\0\0\x03\x8c\0\0\x98\0\0\0\xde\0\0\0\xec\x01\0\0\
\x02\x98\0\0\xa0\0\0\0\xde\0\0\0\x0c\x02\0\0\x01\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x92\0\0\0\0\0\x03\0\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8b\0\0\0\0\0\
\x03\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\
\xb0\0\0\0\0\0\0\0\x1a\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x35\
\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x01\0\0\
\0\x05\0\0\0\x70\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\xe8\x01\0\0\0\0\0\0\x04\0\0\
\0\x05\0\0\0\0\x02\0\0\0\0\0\0\x04\0\0\0\x06\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x0d\x0f\x0e\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\
\x2e\x65\x78\x74\0\x2e\x6d\x61\x70\x73\0\x63\x6f\x75\x6e\x74\x69\x6e\x67\x5f\
\x6d\x61\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x5f\
\x6c\x69\x63\x65\x6e\x73\x65\0\x6d\x79\x5f\x6d\x6d\x5f\x70\x61\x67\x65\x5f\x61\
\x6c\x6c\x6f\x63\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\
\x6b\x6d\x65\x6d\x2f\x6d\x6d\x5f\x70\x61\x67\x65\x5f\x61\x6c\x6c\x6f\x63\0\x2e\
\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\0\x4c\x42\x42\x30\x5f\x33\0\x4c\x42\x42\x30\x5f\x32\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x72\0\0\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xd3\x07\0\0\0\0\0\0\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x54\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\
\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x06\0\0\0\0\0\0\x20\0\0\
\0\0\0\0\0\x0c\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x37\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x33\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0c\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\x05\0\0\0\
\0\0\0\xe0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x07\0\0\0\0\0\0\xb0\0\0\
\0\0\0\0\0\x0c\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x27\0\0\0\
\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x07\0\0\0\0\0\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x06\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\
\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct tracepoint *tracepoint::open(const struct bpf_object_open_opts *opts) { return tracepoint__open_opts(opts); }
struct tracepoint *tracepoint::open_and_load() { return tracepoint__open_and_load(); }
int tracepoint::load(struct tracepoint *skel) { return tracepoint__load(skel); }
int tracepoint::attach(struct tracepoint *skel) { return tracepoint__attach(skel); }
void tracepoint::detach(struct tracepoint *skel) { tracepoint__detach(skel); }
void tracepoint::destroy(struct tracepoint *skel) { tracepoint__destroy(skel); }
const void *tracepoint::elf_bytes(size_t *sz) { return tracepoint__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
tracepoint__assert(struct tracepoint *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRACEPOINT_SKEL_H__ */
