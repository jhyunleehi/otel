package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

type bpfFevent struct {
	Pid  uint32
	Tid  uint32
	File [32]int8
	Task [16]int8
	Op   uint32
}

func main() {

	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	fn := "vfs_create"
	kp1, err := link.Kprobe(fn, objs.VfsCreate, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp1.Close()

	fn = "vfs_open"
	kp2, err := link.Kprobe(fn, objs.VfsOpen, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp2.Close()

	fn = "security_inode_create"
	kp3, err := link.Kprobe(fn, objs.SecurityInodeCreate, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp3.Close()

	fn = "vfs_unlink"
	kp4, err := link.Kprobe(fn, objs.VfsUnlink, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp4.Close()

	fn = "vfs_unlink"
	kp5, err := link.Kretprobe(fn, objs.VfsUnlinkRet, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp5.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := perf.NewReader(objs.Events, os.Getpagesize())
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	rbd, err := ringbuf.NewReader(objs.Fevents)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rbd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	var fevent bpfFevent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		ntime := time.Now()
		ts := ntime.Format(time.RFC3339)
		tgid := event.Tgid
		task := convToString(event.Task[:])
		delta := event.DeltaNs / 1000000000
		file := convToString(event.File[:])

		log.Printf("[%s] [%d] [%s] [%d] [%s]", ts, tgid, task, delta, file)

		/*
			var value uint64
			for i := uint32(1); i <= 4; i++ {
				err := objs.CountMap.Lookup(i, &value)
				if err != nil {
					log.Fatalf("reading map: %v", err)
				}
				log.Printf("[%d] called [%d] times", i, value)
			}
		*/

		rec, err := rbd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(rec.RawSample), binary.LittleEndian, &fevent); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}
		fpid := fevent.Pid
		ftid := fevent.Tid
		fop := fevent.Op
		ftask := convToString(fevent.Task[:])
		ffile := convToString(fevent.File[:])
		log.Printf("DEBUG: ringbuffer message ===> [%d] [%d] [%d] [%s] [%s]", fop, fpid, ftid,ftask, ffile)
	}
}

func convToString(param interface{}) string {
	switch v := param.(type) {
	case int:
		fmt.Println("type:", v)
	case string:
		fmt.Println("type:", v)
		return param.(string)
	case []int8:
		ival := param.([]int8)
		dbytes := make([]byte, len(ival))
		for i, v := range ival {
			dbytes[i] = byte(v)
		}
		//str:=string(dbytes) //not handle null character
		str := unix.ByteSliceToString(dbytes)
		return strings.Trim(str, " ")
	default:
		fmt.Println("type:", v)
	}
	return ""
}

const (
	CREATE uint32 = 0
	OPEN   uint32 = 1
	INODE  uint32 = 2
	UNLINK uint32 = 3
)

func strerrno(eno int32) string {
	if eno < 0 {
		eno *= -1
	}
	errnum := syscall.Errno(eno)
	fmt.Printf("%d:%s", eno, errnum.Error())
	return errnum.Error()
}

func getflags(flags uint64) string {
	slist := []string{}
	if flags == 0 {
		return "0x0"
	}

	for i := 0; i < len(flag_names); i++ {
		if ((1 << i) & flags) == 0 {
			continue
		}
		slist = append(slist, flag_names[i])
	}
	return strings.Join(slist, "|")
}

var flag_names = []string{
	"MS_RDONLY",
	"MS_NOSUID",
	"MS_NODEV",
	"MS_NOEXEC",
	"MS_SYNCHRONOUS",
	"MS_REMOUNT",
	"MS_MANDLOCK",
	"MS_DIRSYNC",
	"MS_NOSYMFOLLOW",
	"MS_NOATIME",
	"MS_NODIRATIME",
	"MS_BIND",
	"MS_MOVE",
	"MS_REC",
	"MS_VERBOSE",
	"MS_SILENT",
	"MS_POSIXACL",
	"MS_UNBINDABLE",
	"MS_PRIVATE",
	"MS_SLAVE",
	"MS_SHARED",
	"MS_RELATIME",
	"MS_KERNMOUNT",
	"MS_I_VERSION",
	"MS_STRICTATIME",
	"MS_LAZYTIME",
	"MS_SUBMOUNT",
	"MS_NOREMOTELOCK",
	"MS_NOSEC",
	"MS_BORN",
	"MS_ACTIVE",
	"MS_NOUSER",
}
