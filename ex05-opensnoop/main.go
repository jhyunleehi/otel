package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"os/user"
	"strings"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	//"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

func main() {	

	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	
	tp1, err := link.Tracepoint("syscalls","sys_enter_open",objs.SyscallsSysEnterOpen,nil)
	if err != nil {
		log.Fatalf("tracepoint: %s", err)
	}
	defer tp1.Close()

	tp2, err := link.Tracepoint("syscalls","sys_enter_openat",objs.SyscallsSysEnterOpenat,nil)
	if err != nil {
		log.Fatalf("tracepoint: %s", err)
	}
	defer tp2.Close()

	tp3, err := link.Tracepoint("syscalls","sys_exit_open",objs.SyscallsSysExitOpen,nil)
	if err != nil {
		log.Fatalf("tracepoint: %s", err)
	}
	defer tp3.Close()

	tp4, err := link.Tracepoint("syscalls","sys_exit_openat",objs.SyscallsSysExitOpenat,nil)
	if err != nil {
		log.Fatalf("tracepoint: %s", err)
	}
	defer tp4.Close()
	
	rd, err := perf.NewReader(objs.Events,os.Getpagesize())
	if err != nil {
		log.Fatalf("opening perf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		ts:=event.Ts
		pid:=event.Pid
		uid:=event.Uid
		username, _ := user.LookupId(fmt.Sprint(uid))
		ret:=event.Ret
		flag:=event.Flags
		
		comm:=convToString(event.Comm[:])
		fname:=convToString(event.Fname[:])

		log.Printf("[%d][%d][%d][%s][%d][%d][%s][%s]",ts,pid,uid,username.Username,ret,flag,comm,fname)
	}
}



func convToString(param interface{}) string {
	switch v := param.(type) {
	case int:
		fmt.Println("type:", v)
	case string:
		fmt.Println("type:", v)
		return param.(string)
	case []int8:
		ival := param.([]int8)
		dbytes := make([]byte, len(ival))
		for i, v := range ival {
			dbytes[i] = byte(v)
		}
		//str:=string(dbytes) //not handle null character
		str := unix.ByteSliceToString(dbytes)
		return strings.Trim(str, " ")
	default:
		fmt.Println("type:", v)
	}
	return ""
}